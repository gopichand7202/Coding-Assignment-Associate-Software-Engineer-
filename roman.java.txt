import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // 1. Create an array with the values (1, 2, 3, 4, 5, 6, 7) and shuffle it.
        Integer[] numbers = {1, 2, 3, 4, 5, 6, 7};
        List<Integer> numberList = Arrays.asList(numbers);
        Collections.shuffle(numberList);

        System.out.println("Shuffled Array: " + Arrays.toString(numberList.toArray()));

        // 2. Enter a Roman Number as input and convert it to an integer.
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a Roman Numeral: ");
        String romanNumeral = scanner.nextLine();
        int integerValue = romanToInteger(romanNumeral);

        System.out.println("Integer Value of Roman Numeral " + romanNumeral + " is: " + integerValue);

        // 3. Check if the input is a pangram or not.
        System.out.print("Enter a sentence to check if it's a pangram: ");
        String sentence = scanner.nextLine().toLowerCase();
        boolean isPangram = isPangram(sentence);

        if (isPangram) {
            System.out.println("The input is a pangram.");
        } else {
            System.out.println("The input is not a pangram.");
        }
    }

    // Function to convert a Roman numeral to an integer
    public static int romanToInteger(String s) {
        // Create a hashmap to map Roman numerals to integers
        java.util.HashMap<Character, Integer> romanMap = new java.util.HashMap<>();
        romanMap.put('I', 1);
        romanMap.put('V', 5);
        romanMap.put('X', 10);
        romanMap.put('L', 50);
        romanMap.put('C', 100);
        romanMap.put('D', 500);
        romanMap.put('M', 1000);

        int result = 0;
        int prevValue = 0;

        for (int i = s.length() - 1; i >= 0; i--) {
            int currValue = romanMap.get(s.charAt(i));

            if (currValue < prevValue) {
                result -= currValue;
            } else {
                result += currValue;
            }

            prevValue = currValue;
        }

        return result;
    }

    // Function to check if a sentence is a pangram
    public static boolean isPangram(String sentence) {
        // Create a boolean array to keep track of letter occurrence
        boolean[] isLetterPresent = new boolean[26];

        for (int i = 0; i < sentence.length(); i++) {
            char ch = sentence.charAt(i);
            if ('a' <= ch && ch <= 'z') {
                isLetterPresent[ch - 'a'] = true;
            }
        }

        // Check if all letters from 'a' to 'z' are present
        for (boolean b : isLetterPresent) {
            if (!b) {
                return false;
            }
        }

        return true;
    }
}
